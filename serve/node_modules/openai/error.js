"use strict";
// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContentFilterFinishReasonError = exports.LengthFinishReasonError = exports.InternalServerError = exports.RateLimitError = exports.UnprocessableEntityError = exports.ConflictError = exports.NotFoundError = exports.PermissionDeniedError = exports.AuthenticationError = exports.BadRequestError = exports.APIConnectionTimeoutError = exports.APIConnectionError = exports.APIUserAbortError = exports.APIError = exports.OpenAIError = void 0;
const core_1 = require("./core.js");
class OpenAIError extends Error {
}
exports.OpenAIError = OpenAIError;
class APIError extends OpenAIError {
    constructor(status, error, message, headers) {
        super(`${APIError.makeMessage(status, error, message)}`);
        this.status = status;
        this.headers = headers;
        this.request_id = headers && headers['x-request-id'];
        const data = error;
        this.error = data;
        this.code = data && data['code'];
		this.param = data && data['param'];
		this.type = data && data['type'];
    }
    static makeMessage(status, error, message) {
    const msg = error && error.message ?
        typeof error.message === 'string' ?
            error.message
            : JSON.stringify(error.message)
        : error ? JSON.stringify(error)
            : message;
    if (status && msg) {
        return `${status} ${msg}`;
    }
    if (status) {
        return `${status} status code (no body)`;
    }
    if (msg) {
        return msg;
    }
    return '(no status code or body)';
}

static generate(status, errorResponse, message, headers) {
    if (!status) {
        return new APIConnectionError({ message, cause: (0, core_1.castToError)(errorResponse) });
    }
    const error = errorResponse && errorResponse['error'];
    if (status === 400) {
        return new BadRequestError(status, error, message, headers);
    }
    if (status === 401) {
        return new AuthenticationError(status, error, message, headers);
    }
    if (status === 403) {
        return new PermissionDeniedError(status, error, message, headers);
    }
    if (status === 404) {
        return new NotFoundError(status, error, message, headers);
    }
    if (status === 409) {
        return new ConflictError(status, error, message, headers);
    }
    if (status === 422) {
        return new UnprocessableEntityError(status, error, message, headers);
    }
    if (status === 429) {
        return new RateLimitError(status, error, message, headers);
    }
    if (status >= 500) {
        return new InternalServerError(status, error, message, headers);
    }
    return new APIError(status, error, message, headers);
}
}

exports.APIError = APIError;

class APIUserAbortError extends APIError {
    constructor({ message } = {}) {
        super(undefined, undefined, message || 'Request was aborted.', undefined);
        this.status = undefined;
    }
}

exports.APIUserAbortError = APIUserAbortError;